name: Deploy Daily AI News Site

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Run Phase 4 tests
      run: |
        python test_phase4_simple.py

  generate-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Generate sample site
      run: |
        python -c "
        import asyncio
        import sys
        from pathlib import Path
        
        # Add src to path
        sys.path.insert(0, str(Path('src')))
        
        from src.config.settings import Settings
        from src.models.article import Article
        from src.generators.static_site_generator import StaticSiteGenerator
        from datetime import datetime
        
        async def generate_demo_site():
            # Create demo articles
            articles = []
            
            # Demo article 1
            article1 = Article(
                id='demo-001',
                title='OpenAI GPT-4 Turbo: Enhanced Performance and Reduced Costs',
                url='https://openai.com/blog/gpt-4-turbo-preview',
                source='OpenAI',
                source_tier=1,
                published_date=datetime.now(),
                content='''OpenAI has released GPT-4 Turbo, featuring improved instruction following, 
                JSON mode, reproducible outputs, and updated knowledge cutoff. The model offers 
                enhanced performance at reduced costs, making advanced AI more accessible for 
                developers and businesses.'''
            )
            article1.evaluation = {
                'engineer': {'total_score': 0.92, 'breakdown': {'technical_depth': 0.95}},
                'business': {'total_score': 0.88, 'breakdown': {'business_impact': 0.90}}
            }
            articles.append(article1)
            
            # Demo article 2
            article2 = Article(
                id='demo-002',
                title='Meta Llama 2: Open Source Large Language Model',
                url='https://ai.meta.com/llama/',
                source='Meta AI',
                source_tier=1,
                published_date=datetime.now(),
                content='''Meta has released Llama 2, a collection of foundation language models 
                ranging from 7B to 70B parameters. Trained on 2 trillion tokens, these models 
                outperform other open source language models on most benchmarks and provide 
                commercial usage rights.'''
            )
            article2.evaluation = {
                'engineer': {'total_score': 0.89, 'breakdown': {'technical_depth': 0.92}},
                'business': {'total_score': 0.82, 'breakdown': {'business_impact': 0.85}}
            }
            articles.append(article2)
            
            # Demo article 3
            article3 = Article(
                id='demo-003',
                title='Google Gemini Pro: Multimodal AI Model Capabilities',
                url='https://deepmind.google/technologies/gemini/',
                source='Google DeepMind',
                source_tier=1,
                published_date=datetime.now(),
                content='''Google DeepMind has introduced Gemini, a multimodal AI model capable of 
                understanding text, images, audio, and video. Gemini Pro demonstrates competitive 
                performance across various benchmarks and supports advanced reasoning capabilities 
                for complex problem-solving tasks.'''
            )
            article3.evaluation = {
                'engineer': {'total_score': 0.87, 'breakdown': {'technical_depth': 0.88}},
                'business': {'total_score': 0.79, 'breakdown': {'business_impact': 0.82}}
            }
            articles.append(article3)
            
            # Generate site
            settings = Settings()
            settings.output_dir = 'docs'
            settings.base_url = 'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}'
            
            generator = StaticSiteGenerator(settings)
            
            await generator.generate_complete_site(
                articles,
                persona='engineer',
                include_interactive=True,
                include_rss=True,
                include_sitemap=True,
                optimize=True,
                secure=True
            )
            
            print(f'Generated site with {len(articles)} articles')
            
        asyncio.run(generate_demo_site())
        "
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4